How to Use 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

``matrix_divided(...)``` returns a new matrix with elements rounded to 2 decimal places after dividing each element by the divisor.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix1 = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix1, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

::

    >>> matrix2 = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]
    >>> matrix_divided(matrix2, 0.1)
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Invalid Matrix
===============

``matrix_divided()`` expects that the matrix is a list of lists of integers or floats.
If the matrix is not valid, a TypeError is raised:

::

    >>> matrix_divided("invalid", 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix_divided([[1, 2, 3], [4, 5]], 3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

Invalid Divisor
===============

The divisor must be a number (integer or float). If it's not, a TypeError is raised:

::

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "invalid")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

Division by Zero
================

If the divisor is equal to 0, a ZeroDivisionError is raised:

::

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero
